# SPDX-License-Identifier: MIT


"""Zeros of `Ai(x)` and `Ai'(x)`
Ref: https://dlmf.nist.gov/9.9#T1
"""
const DLMF_TABLE_9_9_1 = [
#   k,    a_k,           Ai'(a_k),       a'_k,           Ai(a'_k)
    1    -2.33810_74105  0.70121_08227   -1.01879_29716  0.53565_66560;
    2    -4.08794_94441 -0.80311_13697   -3.24819_75822 -0.41901_54780;
    3    -5.52055_98281  0.86520_40259   -4.82009_92112  0.38040_64686;
    4    -6.78670_80901 -0.91085_07370   -6.16330_73556 -0.35790_79437;
    5    -7.94413_35871  0.94733_57094   -7.37217_72550  0.34230_12444;
    6    -9.02265_08533 -0.97792_28086   -8.48848_67340 -0.33047_62291;
    7   -10.04017_43416  1.00437_01227   -9.53544_90524  0.32102_22882;
    8   -11.00852_43037 -1.02773_86888  -10.52766_03970 -0.31318_53910;
    9   -11.93601_55632  1.04872_06486  -11.47505_66335  0.30651_72939;
   10   -12.82877_67529 -1.06779_38592  -12.38478_83718 -0.30073_08293;
]

@testset "ai_zeros" begin
    @test_throws DomainError ai_zeros(-1)

    @test ai_zeros(0) == (Float64[], Float64[], Float64[], Float64[])

    a, da, ai, dai = ai_zeros(10)
    @test isapprox(DLMF_TABLE_9_9_1[:,2] , a)
    @test isapprox(DLMF_TABLE_9_9_1[:,4] , da)
    @test isapprox(DLMF_TABLE_9_9_1[:,5] , ai)
    @test isapprox(DLMF_TABLE_9_9_1[:,3] , dai)
end

@testset "bi_zeros" begin
    
end
